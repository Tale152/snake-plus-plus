package implementation.controller.game;

import java.util.Objects;
import java.util.Optional;

import design.controller.game.DeviceType;
import design.controller.game.InputEvent;
import javafx.scene.input.KeyCode;

/**
 * This class handles InputEvents related to keyboard events generated by JavaFX.
 * @see InputEvent
 * @author Nicola Orlando
 *
 */
public final class InputEventFX implements InputEvent {

    private final String key;

    @Override
    public DeviceType getDeviceType() {
        return DeviceType.KEYBOARD;
    }

    @Override
    public Optional<Long> getDeviceID() {
        return Optional.empty();
    }

    @Override
    public String getInput() {
        return key;
    }

    @Override
    public int hashCode() {
        return Objects.hash(getInput(), getDeviceType(), getDeviceID());
    }

    private boolean equals(final InputEvent input) {
        final boolean isKeyEqual = input.getInput().contentEquals(getInput());
        final boolean isDeviceTypeEqual = input.getDeviceType().equals(getDeviceType());
        boolean isDeviceIdEqual = false;
        if (getDeviceID().isPresent() && input.getDeviceID().isPresent()) {
            isDeviceIdEqual = getDeviceID().get().equals(input.getDeviceID().get());
        } else if (!getDeviceID().isPresent() && !input.getDeviceID().isPresent()) {
            isDeviceIdEqual = true;
        }
        return  isKeyEqual && isDeviceIdEqual && isDeviceTypeEqual;
    }

    @Override
    public boolean equals(final Object o) {
        if (o == null) {
            return false;
        }
        return o.getClass().equals(this.getClass()) && this.equals((InputEvent) o);
    }

    /**
     * Create an InputEvent from a JavaFX KeyCode.
     * @param k The KeyCode of the intended button.
     */
    public InputEventFX(final KeyCode k) {
        this.key = k.toString();
    }

}
